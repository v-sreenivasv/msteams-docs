### YamlMime:Tutorial
title: Meeting Token Generator
metadata:
  title: Meeting Token Generator
  description: In this tutorial, you'll learn to set up a Meeting Token Generator for Teams.
  audience: Developer
  level: Beginner
  ms.date: 11/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/enable-and-configure-your-app-for-teams-meetings.md
  nextTutorialTitle: Read more to authenticate apps in Teams meeting
  ms.custom: mvc
  ms.localizationpriority: none
items:
- durationInMinutes: 1
  content: |
    Meeting Token Generator app helps to enhance your meeting experience in Teams by allowing meeting participants to request for token. The app generates tokens sequentially so that each participant has equal opportunity to interact in the meeting. For example, the app is useful in Q&A sessions and in meetings, such as scrum meetings.

    > [!NOTE]
    > The In-meeting tabs for Meeting Token Generator app are available only in the **Teams desktop client**.

    **Key features of Meeting Token Generator**

    * Displays the current token that is being serviced in the meeting.
    * Displays the user list sorted by the token number.
    * Generates a token for the user upon request.
    * Displays current user's token number.
    * Allows the organizer to skip the current meeting token.

    **Different ways of user interactions**

    * Token: Requests token for the user.
    * Done: Confirms token generation for the user.
    * Skip: Skips the current user and moves to the next person in line for a token.

       > [!NOTE]
       > Skip is available only to the meeting organizers.
    
    This step-by-step guide helps you to generate meeting token to extend meetings in Teams. You'll see the following output:

       ![Your Token](~/assets/images/meeting-token-generator/meeting-token-generator-yourtokennumber.png)

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

    * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
    * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
    * [nodejs](https://nodejs.org/en/download/) LTS version 10.21.0 or later
    * [ngrok](https://ngrok.com/download) latest version (only for devbox testing) or any equivalent tunneling solution
    * [Get a free Teams developer tenant](https://developer.microsoft.com/en-us/microsoft-365/dev-program)
    
    Ensure you have working knowledge of the following technologies:

    * [C#](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/how-to-display-command-line-arguments)
    * [ECMAScript6](http://es6-features.org/#Constants)
    * [ASP.NET core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-3.1) version 3.1
    * [React.JS](https://reactjs.org/tutorial/tutorial.html) version 16 or later

- title: Set up local environment
  durationInMinutes: 1
  content: |
   Clone `Microsoft-Teams-Samples` repository to your local GitHub:  

    1. Open [Microsoft Teams Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**:

       ![Clone repository](~/assets/images/meeting-token-generator/meeting-token-generator-clonerepository.png)

    1. Select **Clone**. 

- title: Create and register your bot in AAD portal
  durationInMinutes: 5
  content: |
    To create and register your bot in Azure Active Directory(AAD), create a tunnel using ngrok, and add messaging endpoint, perform the following steps:

    * Create Azure Bot resource to register bot with Azure Bot Service.
    * Create client secret that enables SSO authentication of the bot.
    * Add Microsoft Teams channel to deploy the bot to a Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.
    1. In the search box, enter **Azure Bot**.
    1. Select **Enter**.
    1. Select **Azure Bot**.

         ![Create Azure bot card](~/assets/images/bots/createazurebot.png)

    1. Select **Create**.
    1. Enter required bot handle name in **Bot handle**.
    1. From the **Subscription** dropdown list, select **msteams.nonprod.pub.msft.aplt**.
    1. From the **Resource group** dropdown list, select your existing resource group. You can also create a new resource group (select **Create new** > enter resource name > select **OK**).
    
    1. Select the required location from **New resource group location** dropdown list.

        ![Create resource Azure bot](~/assets/images/meeting-token-generator/meeting-token-generator-review-plus-create.png)

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can either select **Use existing app registration** and enter **Existing app ID** and **Existing app password**, or select **Create new Microsoft App ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Review + create**.

        ![Create Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-appidcreate.png)

    1. If the validation passes, select **Create**.

        It takes a few moments for your bot service to be provisioned.

    1. Select **Go to resource**. 

        ![Deploy App](~/assets/images/meeting-token-generator/meeting-token-generator-botdeployment.png)

        Your Azure bot is created:

        ![Azure bot resource created](~/assets/images/meeting-token-generator/meeting-token-generator-bot-page.png)

    **To create client secret**

      Perform the following steps if you have created a new **Microsoft App ID**:

    1. In the left panel, select **Configuration**. 

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

    1. Next to **Microsoft App ID**, select **Manage**.

        ![Microsoft App ID](~/assets/images/meeting-token-generator/meeting-token-generator-config.png)

    1. In the **Client secrets** section, select **New client secret**. 

        ![New client secret](~/assets/images/meeting-token-generator/meeting-token-generator-newclientsecret.png)
    
       The **Add a client secret** window appears.  

    1. Enter **Description**.
    
    1. Select **Add**.

        ![Add client secret to app](~/assets/images/meeting-token-generator/meeting-token-generator-clientsecret.png)

    1. In the **Value** column, select **Copy to clipboard**.

         ![Value of client secret](~/assets/images/meeting-token-generator/meeting-token-generator-clientvalue.png)
       
       > [!TIP]
       > Save the **Client secrets** value or app password for future reference.

    **To add the Microsoft Teams channel**

    1. Select **Home**.

        ![Home page](~/assets/images/meeting-token-generator/meeting-token-generator-gotohome.png)

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane. 

    1. Select **Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

          ![Terms of service](~/assets/images/meeting-token-generator/meeting-token-generator-terms.png)

    1. Select **Save**.

          ![Select Teams](~/assets/images/meeting-token-generator/meeting-token-generator-config-teams.png)   
    
    **To create tunnel for local web server**

    Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http -host-header=localhost 3978
     ```

    > [!NOTE]
    > While creating ngrok tunnel, use `localhost 5000` instead of `3978` if you choose **Command line** to run your app.
    
    > [!TIP]
    > If you encounter **ERR_NGROK_4018**, follow the steps provided in the command prompt to sign-up and authenticate ngrok. Then run the `ngrok http -host-header=localhost 3978` command.


    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL (https to io) as shown in the following image.

        ![ngrok HTTPS URL](~/assets/images/meeting-token-generator/meeting-token-generator-ngrok.png)

        > [!NOTE]
        > The HTTPS URL in your ngrok is your fully qualified domain name.
        > The `WebAppDomain` is a fully qualified domain name that does not include `https://` in it.

    1. In **Settings** for the Azure bot that you created, select **Configuration**.

    1. In **Messaging endpoint**, use the HTTPS URL available from ngrok and at the end of the URL add **/api/messages**.

        ![Messaging Endpoint](~/assets/images/meeting-token-generator/meeting-token-generator-messaging-endpoint.png)

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot Service.


- title: Update the AAD app registration for tab SSO
  durationInMinutes: 1
  content: |
    **To register your app through the AAD portal**  

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Azure Active Directory**.

    1. In the left navigation panel, select **App Registrations**.

    1. Select your bot.

       ![App registration](~/assets/images/meeting-token-generator/meeting-token-generator-appregister.png)

    1. Under **Manage**, select **Expose an API**.

    1. Select **Set**.

       ![Expose an API](~/assets/images/meeting-token-generator/meeting-token-generator-exposeanapi.png)

    1. Set the **Application ID URI** in the form of `api://{AppID}`.

       ![Set link](~/assets/images/meeting-token-generator/meeting-token-generator-setlink.png)

    1. Insert the `WebAppDomain` value between `api://` and `/{AppID}`.</br>
        `api://ae57****.ngrok.io/{AppID}`</br>
        
       The domain name is highlighted in the following image:
        
        ![App ID URI](~/assets/images/meeting-token-generator/meeting-token-generator-appIDuri.png)

        > [!NOTE]
        > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain changes.
        > `For example: api://f631****.ngrok.io/92c11075-c629-4a1e-ab58-02b4fd4204c2`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    1. Select **Add a scope**. 
    
    1. In the panel that appears, enter `access_as_user` as the **Scope name**.
  
    1. Set **Who can consent?** to `Admins and users`.
  
    1. To configure the admin and user consent prompts with appropriate values for `access_as_user` scope, provide the following information in the fields:</br>
    
         * Enter `Teams can access the user’s profile` as **Admin consent display name**.

         * Enter `Allows Teams to call the app’s web APIs as the current user` as **Admin consent description**.

         * Enter `Teams can access the user profile and make requests on the user’s behalf` as **User consent display name**.

         * Enter `Enable Teams to call this app’s APIs with the same rights as the user` as **User consent description**.
  
       The following image shows the fields and the values:

        ![Add a scope](~/assets/images/meeting-token-generator/meeting-token-generator-addascope.png)

    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.
       The **Scope name** should match with the **Application ID** URI with `/access_as_user` appended at the end:</br>
           `api://ae57****.ngrok.io/00000000-0000-0000-0000-000000000000/access_as_user`

        ![Scopes](~/assets/images/meeting-token-generator/meeting-token-generator-scopes.png) 
  
    1. In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

    1. Enter each of the following client IDs and select the authorized scope:</br>

         * `1fec8e78-bce4-4aaf-ab1b-5451cc387264` (Teams mobile or desktop application)
         * `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` (Teams web application)

         ![Add client application](~/assets/images/meeting-token-generator/meeting-token-generator-addclientapplication.png) 

       The following image displays the client IDs:

         ![Client applications](~/assets/images/meeting-token-generator/meeting-token-generator-clientapps.png) 
  
    1. In the left panel, select **API Permissions**. 

       > [!NOTE]
       > Users need to consent to these permissions only if the AAD app is registered in a different tenant.

    1. Select **Add a permission**.

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

        By default, **User.Read** is checked.

         ![User](~/assets/images/meeting-token-generator/meeting-token-generator-userpermission.png)

    1. Add the following permissions:</br>
         * **email**
         * **offline_access**
         * **OpenId**
         * **profile**

    1. Select **Add permissions**.

         ![Other permissions](~/assets/images/meeting-token-generator/meeting-token-generator-otherpermissions.png)

    1. From the left panel, select **Authentication** to set a redirect URI. 

       > [!NOTE]
       > If an app is not granted IT admin consent, users must provide consent the first time they use an app.
               
         1. Select **Add a platform**.
         1. Select **Web**:

            ![Web](~/assets/images/meeting-token-generator/meeting-token-generator-webauthentication.png)

         1. Enter the redirect URI for your app by appending `auth-end` to fully qualified domain name:</br> 
           `https://ae57****.ngrok.io/auth-end`. </br>

         1. Enable **Implicit grant and hybrid flows** by selecting the following boxes:
             * **ID tokens**
             * **Access tokens**
   
         1. Select **Configure**.

            ![Auth-end](~/assets/images/meeting-token-generator/meeting-token-generator-authend.png)


- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Navigate to **appsettings.json** in cloned repository.

        ![App settings location](~/assets/images/meeting-token-generator/meeting-token-generator-appsettingslocation.png)

    1. Open **appsettings.json** in **Visual Studio Code** and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"AzureAd"."TenantId"` to the tenant ID of the tenant where the app is used.

             > [!NOTE]
             > The sample works only in the current tenant.

         * Set `"AzureAd"."ApplicationId"` to your bot's **Microsoft App ID**.
         * Set `"ContentBubbleUrl"` to the content bubble iframe url `(https://[WebAppDomain]/contentBubble.html)`.

             > [!NOTE]
             > `WebAppDomain` is your ngrok domain, so the content bubble URL is similar to `https://ae57****.ngrok.io/contentBubble.html`.

        ![App settings](~/assets/images/meeting-token-generator/meeting-token-generator-appsettings.png)

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Navigate to **manifest.json** in cloned repository.

        ![Manifest file location](~/assets/images/meeting-token-generator/meeting-token-generator-manifestlocation.png)
    
    1. Open **manifest.json** in **Visual Studio Code** and make the following changes:

         * Set `manifestVersion` to `1.11`.

           > [!NOTE]
           > Provide the latest version.

         * Set `$schema` to `https://developer.microsoft.com/json-schemas/teams/v1.11/MicrosoftTeams.schema.json`.
         * Set `resource` to `api://[WebAppDomainName]/[MicrosoftAppId]`.
         * Replace `[companyName]` to `Contoso`.
         * Replace the following sections to your fully qualified domain name:
           * `[websiteUrl]`
           * `[privacyUrl]`
           * `[termsOfUseUrl]`


           ![Manifest image1](~/assets/images/meeting-token-generator/meeting-token-generator-manifest-1.png)

         * Replace all occurrences of `[WebAppDomainName]` with your ngrok domain name.
         * Replace all occurrences of `[MicrosoftAppId]` with your bot's **Microsoft App ID**.

           ![Manifest image2](~/assets/images/meeting-token-generator/meeting-token-generator-manifest-2.png)

- title: Build client app using npm install
  durationInMinutes: 1
  content: |
    **To build client app using npm install to generate distributable folder**
    
    1. Navigate to the **App** folder in cloned repository.
    1. Copy the **App** folder path.
    1. Open a new Command Prompt window, change the current directory to the copied **App** path.

       ![App folder path](~/assets/images/meeting-token-generator/meeting-token-generator-appfolderlocation.png)

    1. Run `npm install` to download packages and dependencies.
    1. Run `npm run build` to build the app.

       ![Build app](~/assets/images/meeting-token-generator/meeting-token-generator-buildapp.png)

       The process generates the distributable or **/dist** folder inside the **App** folder where the assets get copied. The server serves the static files from the location.

       ![Distributable folder](~/assets/images/meeting-token-generator/meeting-token-generator-distfolder.png)

- title: Build and run the service
  durationInMinutes: 1
  content: |
    **To build and run the service using Visual Studio 2019 or Command line**

    # [Visual Studio 2019](#tab/vs2019)

       1. Launch **Visual Studio 2019**.
       1. Navigate to **File** > **Open** > **Project/Solution**.
    
          ![Open file](~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png)

       1. Select **TokenApp.csproj** file from **csharp** folder.

          ![Token File](~/assets/images/meeting-token-generator/meeting-token-generator-Tokenfileready.png)

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          ![Trust Certificate](~/assets/images/meeting-token-generator/meeting-token-generator-certificate.png)

          A webpage opens with a message **App is ready!**.

          ![App ready](~/assets/images/meeting-token-generator/meeting-token-generator-appisready.png) 

        
    # [Command line](#tab/cli)

    Navigate to the **csharp** folder in a Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    ![Dotnet](~/assets/images/meeting-token-generator/meeting-token-generator-dotnetruncmd.png)
      
- title: Enable developer preview
  durationInMinutes: 1
  content: |
    **To enable developer preview in your desktop Teams client**

    1. Enable uploading of apps in the admin console of your tenant.
       1. Sign in to [Microsoft 365 admin center](https://admin.microsoft.com/Adminportal/Home?source=applauncher#/homepage#/) with your admin credentials.
       1. In the left panel, select **Show All**.
       1. Select **Teams**.
 
          ![Admin center menu](~/assets/images/meeting-token-generator/meeting-token-generator-admincenterimage.png)

       1. In the left panel, select **Teams apps**.
       
       1. Select **Setup Policies**.

          ![Setup policies](~/assets/images/meeting-token-generator/meeting-token-generator-setuppolicies.png) 

       1. Select **Global**.

          ![Toggle On](~/assets/images/meeting-token-generator/meeting-token-generator-turnonsideloadimage.png)

       1. Toggle **Upload custom apps** to **On** position.

          ![Toggle On](~/assets/images/meeting-token-generator/meeting-token-generator-toggleOn.png)

       1. Select **Save**. 
       
          Your test tenant can permit custom app sideloading.

          > [!NOTE]
          > The sideloading takes some time to become active.

    1. Go to **Microsoft Teams**.
    
    1. From the upper right corner of your Teams interface, select `...`.
    
    1. Select **About**. 
    
    1. Select **Developer preview**.

        ![Developer preview](~/assets/images/meeting-token-generator/meeting-token-generator-devpreview.png)
   
    1. Select **Switch to Developer preview**.

        ![Switch to developer preview](~/assets/images/meeting-token-generator/meeting-token-generator-switchtodevpreview.png)

- title: Add Meeting Token App to Teams
  durationInMinutes: 1
  content: |
    **To create a Teams meeting and add Meeting Token App**

    1. In your cloned repository, navigate to **csharp > Resources > Manifest**.

    1. Create a .zip with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       ![Zip file](~/assets/images/meeting-token-generator/meeting-token-generator-zipfile.png) 
    
    1. Create a meeting with a few presenters and attendees.
   
    1. After the meeting is created, go to the meeting details page and select **Add** **an app**.

       ![Add an app](~/assets/images/meeting-token-generator/meeting-token-generator-addanapp.png) 
   
    1. In the pop-up that opens, select **Manage apps**.

       ![Manage apps](~/assets/images/meeting-token-generator/meeting-token-generator-manageappsimage.png)
   
    1. Select **Upload a custom app**. 

       ![Upload custom app](~/assets/images/meeting-token-generator/meeting-token-generator-uploadcustomapp.png)

    1. Select **Open** to upload the .zip file that you created in the **Manifest** folder.

       ![Select zip file](~/assets/images/meeting-token-generator/meeting-token-generator-selectzip.png)

    1. Select **Add**.

       ![Add the app](~/assets/images/meeting-token-generator/meeting-token-generator-addtheapp.png)

       The **Manage apps** section displays the list of applications.

       ![App in Manage apps](~/assets/images/meeting-token-generator/meeting-token-generator-manageappsection.png)
   
    1. Go to Teams meeting.
    
    1. Select **Add an app**. 
    
       In the app selection page, the app displays as **Meeting Token App**.
  
       ![App icon in Teams](~/assets/images/meeting-token-generator/meeting-token-generator-appicon.png)

    1. Select the **Meeting Token App**.
    
    1. Select **Save**.

       ![Welcome App](~/assets/images/meeting-token-generator/meeting-token-generator-welcomeapp.png)
   
       The app is visible in the meeting chat. 

    1. Start the meeting. 
    
       The icon is visible in the meeting control bar.

        ![Token in Meet](~/assets/images/meeting-token-generator/meeting-token-generator-tokeninmeet.png)

     > [!NOTE] 
     > When you work on your own project, ensure to use a durable storage mechanism to store the token information and service URL for the tenant.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ![Your Token](~/assets/images/meeting-token-generator/meeting-token-generator-yourtokennumber.png)

- content: |
    You've completed the tutorial to get started with a Meeting Token Generator app.

    See how your application looks like in a real-time scenario:

    ![Real time](~/assets/images/meeting-token-generator/meeting-token-generator-realtimescenario.png)

